Okay. Hello, Cloud Gurus,
and welcome to this lecture.
In this lecture we're going to look at
permanent identity access management credentials.
So in this lecture we're going to look at
the building blocks of IAM.
We're going to look at users, groups, and roles.
Then we're going to run through our best practices
in terms of policies,
our best practices in terms of users and peoples.
And then we're going to talk about
the principle of least privilege.
Then we'll go in and look at how we can set all this up
in IAM and we'll move on to my exam tip.
So let's start with the building blocks
of identity access management.
So we have our users,
and our user should be a physical person.
One user should always equal 1 human being
and we should group our users into groups
and this should be by job function.
So essentially your job function might be
your administrators, your developers,
human resources, finance--whatever job function you have
within your organization,
you should create a group for that
and then put your, the relevant users into those groups.
And then we have roles.
And roles are basically used for internal usage within AWS,
and it allows 1 part of AWS to access another part of AWS.
We're going to cover this off in a lot more detail
in the EC2 section of the course.
Essentially, what we're going to do
is allow our virtual machines to access our S3 buckets.
Roles are very easy to understand,
but only once you start using them.
So I'm going to cover that off
in the EC2 section of the course.
Right now we're really going to focus
on users, groups, and policies.
So like I was saying before, it's best practice
for users to inherit their permissions from groups.
You can definitely assign IAM policy documents
directly to users to give them permissions.
But that can be really hard to manage,
especially if you have users coming and going
from the organization--
if you've got contractors, etc.
It's much easier to basically apply
an IAM policy document to a group.
And then what will happen is the users
in that group will inherit those permissions.
So when you're making changes, you do it at a group level
rather than a user level.
So it is best practice to always apply IAM policies
to groups rather than to individual users.
And remember that users and people
basically should be equal to each other.
So 1 user should always equal 1 physical person.
You should always work on that principle.
You should never share user accounts across multiple people.
So you shouldn't have an administrator user
and then you share that with a team of 5
because you basically wouldn't be able
to track who did what.
You should always make 1 user
equal to 1 physical person.
And then following on from that,
we have the principle of least privilege.
And you hear this a lot when you're talking about
security discussions within AWS and within tech in general.
And this is where you only assign a user
the minimum amount of privileges they need to do their job.
So your developers, you want to give them developer access,
maybe full administrator access to the AWS platform.
What you don't want to do is give that to your finance team
or to your human resources team.
Your finance team and your human resources team
don't need to spin up virtual machines.
They probably don't need to go in
and use some of the artificial intelligence services.
That's something only your devs
potentially should need to do.
So just remember, you should only assign a user or a group
the minimum amount of privileges they need
in order to do their job.
So let's go ahead and log in to the AWS console
and see all of this in action.
Here I am in the AWS console,
I'm going to go over to identity access management--
which, as always, is under Security, Identity,
and Compliance, and IAM is the very first one.
And here we can see I've got zero users and zero groups.
Now the first thing,
we'll just go ahead and create our user.
And in here, I'm going to add our user and the username.
I'm just going to put as my name.
So Ryan Kroonenburg,
and then in here we've got our access type.
So we've got programmatic access or console access.
Now I'm going to go ahead and grant console access.
If you do programmatic access,
it's going to generate an access key ID
and secret access key.
In fact, let's click on that as well.
And then in here we've got our console password.
It's going to be auto-generated
and then we're going to require
that our users reset their password as they sign in.
So let's go ahead and add our permissions.
Now you can see that we haven't added any groups yet.
So it says you haven't created any groups yet.
Let's go ahead and create a group.
Now, my group name--
I'm going to give this administrator access,
so admin, or I'll just call it administrators, for example.
So administrators.
And in here we can apply a policy to the group.
Now these are AWS managed policies
and you can see here that this one's by job function.
So I'm going to give my administrator group
administrator access, and you can click in here
to have a look at the policy summary,
which is basically saying, allow everything.
So let's go ahead and hit Create Group.
And that will go ahead and create my group.
And now I'm going to add my user to this group.
So I'm going to be the administrator of my group.
So in here I have my tags.
In here, we could put in our department, for example,
so our department would be administrators.
So this person is in my administrator group.
We could have employee ID.
So employee_ID
and then 1, 2, 3, 4, 5, etc., etc.
And all these tags will be key-value pairs
that are added to our user.
So it allows us to track our users
and you can sort by tags later on.
Let's go ahead and hit Next to review.
And we're going to go in and go ahead and create our user.
Okay, so we've successfully created our user.
And we can see 3 things here.
We've got our access key ID,
our secret access key, and our password.
Now our access key ID and secret access key
is used for programmatic access to the AWS console.
We're going to cover that off later on
in the course when we configure the command line.
But the key point to take away here
is you're only ever going to see all this once.
So you should either send an email or download it as a CSV.
And you can see in here my password as well.
So I'm going to go ahead and delete this
as soon as I finish this lecture
so you guys can't access my account,
but you will only ever see all of this information once.
So let's go ahead and hit Close.
And that has now created my user.
And if I go into my groups,
I'll be able to see my groups in here.
And we've got our administrator.
Now, I'm not going to create any more groups or users,
but I am going to go down to policies.
And I want to show you--
you can see here, we've got our job function.
So we've got administrator access.
Now you can keep scrolling down.
And, honestly, because everything begins with Amazon,
it takes an awful long time.
So I'm going to pause the video
and scroll all the way to the bottom.
So I've just gone past the Amazon part,
but you can see in here, we've got database administrator
and data scientist, and these are job functions.
So Amazon already have pre-populated policies
for particular job functions.
We scroll all the way to the bottom.
You can now see quite easily,
we've got view-only access.
We've got system administrator.
We've got support users.
We've got security audit.
We've got our power user access,
network administrator access.
And over here is the description.
So power user provides full access
to AWS services and resources
but does not allow management of users and groups.
So a power user can go in and do everything
that a normal administrator can,
but they can't create a user and can't create a group
and they can't grant administrator access
to users or groups.
They basically are sort of like an administrator
except they don't have the ability
to create users and groups.
And if you read the different job functions,
it will give you a breakdown as to what they can do.
But you can also click in the policy document.
So data scientist
grants permission to AWS data analytic services.
And if you want to actually go in and view the policy,
you can just click the down arrow
and you can actually read the policy here.
So in here, we've got our statement.
Our action is all of these services.
It's going to essentially affect allow and then resource.
And then these are all the stuff that it allows,
and you can see it can get quite complicated in here.
So it will allow access to some AWS services that it thinks,
or that AWS thinks, are involved with data scientists.
So things like data pipeline, for example,
CloudWatch or CloudFormation, etc., etc.
Don't worry if you don't know
what any of these services are, we'll cover them off later.
But the point I'm trying to make
is Amazon pre-populate policies based on the job function
to make your life easy.
Now, of course, you can go in and create your own policies,
that's totally up to you.
Then you basically give them a name
and it will be saved here.
But basically it will be saved down the bottom.
It will be under the AWS management policies
and you won't have the icon.
If you've got a customer managed policy,
like you can see in here,
it's going to be--essentially,
it won't have this little icon here,
which means it's not an AWS managed policy.
So now that we've created our users and groups,
let's go ahead and have a look at our account settings.
And in here, we can basically define our password policy.
So right now it uses the following custom password policy.
So we've got a minimum of 8 characters.
We need at least 1 uppercase letter,
one lowercase letter, at least 1 number,
and 1 non-alphanumeric character.
And in here you can actually change the password policy.
So you can enable a password expiration.
You can say, Hey, I want my passwords
to expire every 90 days.
We can now allow our users to change their own passwords.
We can also prevent password reuse.
So we can make it super, super secure.
And all you have to do is hit Save Changes
and that will then save our password policy and update it.
So now it's gone from default.
Now, it will essentially expire every 90 days.
We can allow our users to change their own passwords.
And we can remember our last 5 passwords
and prevent reuse.
Another thing I want to show you
is if we just create a new user
and let's just add this user,
we'll call it a test_user.
So test_user.
I'm going to give them console access.
I'm just going to go ahead and hit Next.
I'm not going to assign them to a group.
I'm just going to go ahead and hit Next.
And I'm going to leave my tags and hit Review.
Now you can see, it says this user has no permissions.
You haven't given this user any permissions.
This means that the user has no access
to any AWS service or resources.
Consider returning to the previous step
and adding some type of permissions.
So every time we create a user, by default
that user has no permissions, has no privileges whatsoever.
So remember that going into your exam.
And finally, the last thing I want to show you
is identity providers.
So if we click in here,
we'll be able to see our identity providers.
And in here you can see it says
it makes it easy to centrally manage access
to multiple AWS accounts and provide users
with a single sign-on access
to all their accounts from 1 place.
You can go in here and add a policy.
And the most common type of policy is a SAML policy
that's tied into something
like Active Directory Federation Services.
So if you work in a Windows environment,
when you log on to your Windows machine at work every day,
you're going to enter in your SSO,
which stands for single sign-on.
And that's basically your username and password.
So the same username and password that you use
to log in to your work PC within a Windows environment,
you can also use to log in to the AWS platform.
But in order to configure that, essentially,
you need to establish a trust between your AWS accounts
and Active Directory Federation Services.
And that's what you do here.
Now, I'm not going to show you how to do that.
It's well beyond the scope
of the Solutions Architect - Associate exam.
But the important thing to note is
if you ever see a scenario question
where it talks about making your username and password
the same as when you log in the morning to your AWS account,
that's just basically called federation--
Active Directory Federation.
And you can do that.
You just create an identity provider within IAM
and it's using SAML.
So let's go on to my exam tips.
So what have we learned so far
about identity access management?
Well, we've learned that IAM is universal.
It does not apply to Regions at this time.
When you create a user or a group,
it's created across the world globally.
It's not tied down to a specific Region.
We've also learned that the root account
is the account that's created
when you first set up your AWS account,
which has complete administrator access.
And you want to secure it as soon as possible,
and you shouldn't be using it
for your day-to-day management of AWS.
When you create a new user,
there's no permissions when they're first created.
We had to go in and essentially add permissions to our user.
We did that in this lecture by adding our user into a group.
And we then assigned our group with AWS permission.
So we gave our group administrator access.
Our access key ID and secret access key
are not the same as usernames and passwords.
Access key ID and secret access keys
are used for programmatic access to the AWS console.
And like I said, we're going to look at that in more detail
when we cover off the command line.
You will only get to view your access key ID
and secret access key once.
So make sure you save them,
download them, and send them on to your users.
If not, you are going to have to regenerate them.
And we'll have a look at how we can do that again
in the EC2 section of the course.
And you should always set up password rotation,
so you can create and customize
your own password rotation policies.
And then finally, we learned about IAM federation.
So we learned that you can combine
your existing user accounts with AWS.
For example, when you log on to your PC,
usually using Microsoft Active Directory,
you can use the same credentials to log in to AWS
if you set up federation.
And to do that, you use identity federation,
and this uses SAML as the standard,
which is essentially Active Directory.
So that is it for this lecture, everyone.
In the next lecture we're just going to review
everything that we learned in this section of the course,
and then we're ready to move on.
So if you've got the time,
please join me in the next lecture.
Thank you.