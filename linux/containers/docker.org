#+STARTUP: indent
#+STARTUP: hidestars

* Next things to learn
Continous integration (CI) tool
Jenkins CI

Puppet
Chef

Docker Management tool
Shipyard
Portainer
Kitematic

Logging Drivers
syslog
Graylog's GELF protocl
Fluentd
log rotation driver

Go Template

Union Mount

bootfs
initrd images
rootfs


kernel
namespaces
cgroups
grub

chroot jail


Different container technologies
OpenVZ
Solaris Zones
lxc
Moby -> docker

Linux Kernel Features
native Linux container format. Docker called it libcontainer
control groups or cgroups
namespaces
copy-on-write filesystems


Service Architecture
Microservices

RESTful API
full RESTful API


Docker compose
Docker swarm
Docker cluster
Docker provides the primary underlying compute layer in the orchestration tool Kubernetes

* What's Docker?
Docker adds an application deployment engine on top of a virtualized container execution environment. It is designed to provide a lightweight and fast environment in which to run your code as well as an efficient workflow to get that code from your laptop to your test environment and then into production.

** Docker Daemon
Docker Daemon listens to /var/run/docker.sock
root        1102       1  0 14:05 ?        00:00:03 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock

ls -l /var/run/docker.sock
srw-rw---- 1 root docker 0 Nov 21 14:05 /var/run/docker.sock


** TODO Binding Docker daemon to different to multiple places.
[need more explanation]

** Checking docker daemon status.
 sudo systemctl status docker
● docker.service - Docker Application Container Engine
     Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)
     Active: active (running) since Sat 2020-11-21 14:05:29 +08; 3h 53min ago
TriggeredBy: ● docker.socket
       Docs: https://docs.docker.com
   Main PID: 1102 (dockerd)
      Tasks: 7
     Memory: 32.8M
     CGroup: /system.slice/docker.service
             └─1102 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock

Nov 21 14:05:28 magpie dockerd[1102]: time="2020-11-21T14:05:28.824876675+08:00" level=warning msg="Your kernel does not support cgroup blkio weight"
Nov 21 14:05:28 magpie dockerd[1102]: time="2020-11-21T14:05:28.824927445+08:00" level=warning msg="Your kernel does not support cgroup blkio weight_>
Nov 21 14:05:28 magpie dockerd[1102]: time="2020-11-21T14:05:28.825107427+08:00" level=info msg="Loading containers: start."
Nov 21 14:05:28 magpie dockerd[1102]: time="2020-11-21T14:05:28.990942072+08:00" level=info msg="Default bridge (docker0) is assigned with an IP addr>
Nov 21 14:05:29 magpie dockerd[1102]: time="2020-11-21T14:05:29.064489300+08:00" level=info msg="Loading containers: done."
Nov 21 14:05:29 magpie dockerd[1102]: time="2020-11-21T14:05:29.103053661+08:00" level=warning msg="Not using native diff for overlay2, this may caus>
Nov 21 14:05:29 magpie dockerd[1102]: time="2020-11-21T14:05:29.103983592+08:00" level=info msg="Docker daemon" commit=4484c46d9d graphdriver(s)=over>
Nov 21 14:05:29 magpie dockerd[1102]: time="2020-11-21T14:05:29.104361315+08:00" level=info msg="Daemon has completed initialization"
Nov 21 14:05:29 magpie systemd[1]: Started Docker Application Container Engine.
Nov 21 14:05:29 magpie dockerd[1102]: time="2020-11-21T14:05:29.153834999+08:00" level=info msg="API listen on /run/docker.sock"
lines 1-21/21 (END)

** Run and check a container
Run a container in interactive mode
$ docker run --interactive --tty --name bob ubuntu:20.04 /bin/bash
It gives entry to the container and bash prompt. exit command will stop the container

Check the stopped container
$ docker ps -a
$ docker ps

To start the stopped container
$ docker start bob
$ docker attach bob

$ docker run --name bob --detach ubuntu:20.04 /bin/bash -c "while true; do echo hello bob; sleep 3; done"
$ docker logs bob
$ docker logs --tail 0 -f -t bob

$sudo docker run --log-driver="syslog" --name daemon_dwayne -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"

$ docker top bob
$ docker stats bob

$ docker run --name bob --detach ubuntu:20.04 /bin/bash -c "while true; do echo hello bob; sleep 3; done"

Running a background task inside a running container
$ docker exec --detach bob touch /etc/new_touch_file

Running an interactive command inside a container
$ docker exec --interactive --tty bob /bin/bash
root@d166afd90939:/# ps -aux
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root           1  0.3  0.2   3984  2968 ?        Ss   11:02   0:00 /bin/bash -c while true; do echo hello bob; sleep 3; done
root          42  6.7  0.3   4116  3472 pts/0    Ss   11:03   0:00 /bin/bash
root          50  0.0  0.0   2516   516 ?        S    11:03   0:00 sleep 3
root          51  0.0  0.2   5896  2836 pts/0    R+   11:03   0:00 ps -aux
root@d166afd90939:/# ls -l /etc/new_touch_file
-rw-r--r-- 1 root root 0 Nov 21 11:03 /etc/new_touch_file




** What's a Docker image?
A Docker image is made up of filesystems layered over each other. At the base is a boot filesystem, bootfs, which resembles the typical Linux/Unix boot filesystem. A Docker user will probably never interact with the boot filesystem. Indeed, when a container has booted, it is moved into memory, and the boot filesystem is unmounted to free up the RAM used by the initrd disk image. So far this looks pretty much like a typical Linux virtualization stack. Indeed, Docker next layers a root filesystem, rootfs, on top of the boot filesystem. This rootfs can be one or more operating systems (e.g., a Debian or Ubuntu filesystem).

In a more traditional Linux boot, the root filesystem is mounted read-only and then switched to read-write after boot and an integrity check is conducted. In the Docker world, however, the root filesystem stays in read-only mode, and Docker takes advantage of a union mount ([[https://lwn.net/Articles/312641/]]) to add more read-only filesystems onto the root filesystem.

A union mount is a mount that allows several filesystems to be mounted at one time but appear to be one filesystem. The union mount overlays the filesystems on top of one another so that the resulting filesystem may contain files and subdirectories from any or all of the underlying filesystems. Docker calls each of these filesystems images. Images can be layered on top of one another. The image below is called the parent image and you can traverse each layer until you reach the bottom of the image stack where the final image is called the base image. Finally, when a container is launched from an image, Docker mounts a read-write filesystem on top of any layers below. This is where whatever processes we want our Docker container to run will execute.


Local images live on our local Docker host in the /var/lib/docker directory. Each image will be inside a directory named for your storage driver; for example, aufs or devicemapper.

You’ll also find all your containers in the /var/lib/docker/containers directory

* Installation of Docker
Remove old installation of docker.
$ sudo apt-get remove docker docker-engine docker.io containerd runc

Update the system
$ sudo apt-get update
$ sudo apt-get upgrade


Install packages to allow apt to use a repository over HTTPS:

$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common


Add Docker’s official GPG key:

$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint.

$ sudo apt-key fingerprint 0EBFCD88

pub   rsa4096 2017-02-22 [SCEA]
      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
sub   rsa4096 2017-02-22 [S]


$ sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

$ sudo apt update
$ sudo apt upgrade

$ sudo apt-get install docker-ce docker-ce-cli containerd.io

* Operations
** git clone from another machine
At first create password less ssh login to ease the git clone process.
Then just do the git clone
$ git clone <server-ip>:/home/<username>/<repo-path>

* Registry
** Run a registry server
** Private registry push fail: server gave HTTP response to HTTPS client
For Docker version 18.09.2, I followed https://success.docker.com/article/using-systemd-to-control-the-docker-daemon

sudo systemctl edit docker
add below lines
[Service]
ExecStart=
ExecStart=/usr/bin/dockerd -H fd:// --insecure-registry registry:5000

sudo systemctl daemon-reload
systemctl restart docker
systemctl status docker


* Docker file instructions
RUN
Run the command when the container is being built

CMD
Specify the command to run when the container is launched. It's like specifying a command to run when launching a container with the *docker run* command. And *docker run* command can override the CMD.

ENTRPYPOINT
The ENTRYPOINT instruction provides a command that isn’t as easily overridden. Instead, any arguments we specify on the *docker run* command line will be passed as arguments to the command specified in the ENTRYPOINT.
However, If required at runtime, you can override the ENTRYPOINT instruction using
the docker run command with --entrypoint flag.

WORKDIR
The WORKDIR instruction provides a way to set the working directory for the container and the ENTRYPOINT and/or CMD to be executed when a container is launched from the image.
You can override the working directory at runtime with the -w flag.

ENV
The ENV instruction is used to set environment variables during the image build process.
These environment variables will also be persisted into any containers created from your image. So we can run the *env* command in a container.
You can also pass environment variables on the docker run command line using the -e flag. These variables will only apply at runtime,
$ sudo docker run -ti -e "WEB_PORT=8080" ubuntu env

USER
USER
The USER instruction specifies a user that the image should be run as; for exampl
You can also override this at runtime by specifying the -u flag with the docker run
command.

VOLUME
The VOLUME instruction adds volumes to any container created from the image.
A volume is a specially designated directory within one or more containers that
bypasses the Union File System to provide several useful features for persistent or
shared data:
• Volumes can be shared and reused between containers.
• A container doesn’t have to be running to share its volumes.
• Changes to a volume are made directly.
• Changes to a volume will not be included when you update an image.
• Volumes persist even if no containers use them.
